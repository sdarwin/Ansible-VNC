---
# Include Variables ##########

- name: Include OS-specific variables.
  include_vars: "{{ ansible_os_family }}-family.yml"

- name: Include Distribution version specific variables
  include_vars: "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"

- name: set facts based on defaults  # noqa var-naming
  set_fact:
    "{{ item[8:] }}": "{{ lookup('vars', item) }}"
  when:
    - item is match("^default_")
    - vars[item[8:]] is not defined
  with_items:
    "{{ vars | list }}"

##########

- name: debug info
  debug:
    msg: "desktop is {{ vnc_desktop }} and server is {{ vnc_server }}"

- name: fix test-kitchen
  file:
    path: /tmp/kitchen
    state: directory
    recurse: true
    mode: 0775

- name: fix Ubuntu 17.10 bug, 1
  package:
    name: network-manager
    state: present
    update_cache: true
  when:
    - ansible_distribution_version is version_compare('17.10', '==')

- name: fix Ubuntu 17.10 bug, 2
  service:
    name: NetworkManager
    state: started
  when:
    - ansible_distribution_version is version_compare('17.10', '==')

- name: add customization for xfce4 RH
  include: xfce-rh.yml
  when:
    - ansible_os_family == "RedHat"
    - ansible_distribution_major_version == "8"
    - vnc_desktop == "xfce4"

- name: install epel gpg key
  ansible.builtin.rpm_key:
    state: present
    key: http://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-{{ ansible_distribution_major_version }}
  when:
    - ansible_os_family == "RedHat"

# - name: install epel gpg key
#   command: rpm --import http://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-{{ ansible_distribution_major_version }}
#   when:
#     - ansible_os_family == "RedHat"

- name: install general packages
  package:
    name: "{{ item }}"
    state: present
    update_cache: true
  with_items: "{{ vnc_general_packages }}"

- name: install desktop packages
  package:
    name: "{{ item }}"
    state: present
    update_cache: true
  with_items: "{{ vnc_desktop_packages[vnc_desktop] }}"

- name: install vnc_server packages
  package:
    name: "{{ item }}"
    state: present
    update_cache: true
  with_items: "{{ vnc_server_packages[vnc_server] }}"

# Tigervnc must be downloaded for Ubuntu 16
- name: Create downloads dir
  file:
    path: "/opt/downloads"
    state: directory
    mode: 0755

- name: Download tigervnc
  get_url:
    url: "{{ vnc_tiger_url }}"
    dest: "/opt/downloads"
  when:
    - ansible_distribution == "Ubuntu"
    - vnc_server == "tigervnc"
    - ansible_distribution_major_version == "16"

- name: install tigervnc
  shell: apt install -y "/opt/downloads/{{ vnc_tiger_file }}"  # noqa 305
  when:
    - ansible_distribution == "Ubuntu"
    - vnc_server == "tigervnc"
    - ansible_distribution_major_version == "16"
  changed_when: false

- name: Create .vnc dirs
  file:
    path: "/home/{{ item.username }}/.vnc"
    state: directory
    mode: 0755
    owner: "{{ item.username }}"
    group: "{{ item.usergroup | default(item.username) }}"
  with_items: "{{ vnc_users }}"

- name: Set vnc passwords tightvnc
  shell: |
    set -o pipefail
    echo {{ item.vnc_default_password }} | vncpasswd -f > /home/{{ item.username }}/.vnc/passwd
  args:
    chdir: "/home/{{ item.username }}/.vnc"
    creates: "/home/{{ item.username }}/.vnc/passwd"
    executable: /bin/bash
  with_items: "{{ vnc_users }}"
  when: vnc_server == "tightvnc"

- name: Set vnc passwords vnc4server, tigervnc
  shell: |
    set -o pipefail
    printf "{{ item.vnc_default_password }}\n{{ item.vnc_default_password }}\n\n" | vncpasswd /home/{{ item.username }}/.vnc/passwd
  args:
    chdir: "/home/{{ item.username }}/.vnc"
    creates: "/home/{{ item.username }}/.vnc/passwd"
    executable: /bin/bash
  with_items: "{{ vnc_users }}"
  when: vnc_server == "vnc4server" or vnc_server == "tigervnc"

- name: Set perms on vnc passwords
  file:
    path: "/home/{{ item.username }}/.vnc/passwd"
    owner: "{{ item.username }}"
    group: "{{ item.usergroup | default(item.username) }}"
    mode: 0700
  with_items: "{{ vnc_users }}"

####################################################################################

- name: vnc_paradigm version1
  block:
    - name: checking existence of xstartup files
      stat:
        path: "/home/{{ item.username }}/.vnc/xstartup"
      register: checkxstartup
      with_items: "{{ vnc_users }}"

    - name: Update "xstartup" file
      template:
        src: xstartup.j2
        dest: "/home/{{ item.item.username }}/.vnc/xstartup"
        mode: 0755
        owner: "{{ item.item.username }}"
        group: "{{ item.item.usergroup | default(item.item.username) }}"
      when:
        - vnc_ansible_managed_xstartup or not item.stat.exists
      with_items: "{{ checkxstartup.results }}"

    # the file .dmrc is currently for Redhat/Centos
    - name: checking existence of .dmrc files
      stat:
        path: "/home/{{ item.username }}/.dmrc"
      register: checkdmrc
      with_items: "{{ vnc_users }}"

    - name: Update .dmrc file
      template:
        src: dmrc.j2
        dest: "/home/{{ item.item.username }}/.dmrc"
        mode: 0755
        owner: "{{ item.item.username }}"
        group: "{{ item.item.usergroup | default(item.item.username) }}"
      when:
        - vnc_ansible_managed_xstartup or not item.stat.exists
      with_items: "{{ checkdmrc.results }}"

    - name: Set vncstart template
      set_fact:
        vncstarttemplate: vncstart.sh.j2

    - name: Set vncstop template
      set_fact:
        vncstoptemplate: vncstop.sh.j2

    - name: include systemd auto-start services
      include: autostart-perusersystemd.yml
      when: vnc_install_systemd_services

    - name: include basic shell scripts to start services
      include: autostart-standard.yml
      when: not vnc_install_systemd_services
  when: vnc_paradigm == "version1"

##############################################################################################

- name: vnc_paradigm version2
  block:
    ## Consider adding this kind of functionality back later. It's useful. However supposedly xstartup is deprecated.
    # - name: checking existence of xstartup files
    # - name: Update "xstartup" file
    # - name: checking existence of .dmrc files
    # - name: Update .dmrc file

    - name: vncserver.users file
      template:
        src: vncserver.users.j2
        dest: /etc/tigervnc/vncserver.users
        mode: 0644
        owner: root
        group: root

    - name: checking existence of per-user .vnc/config
      stat:
        path: "/home/{{ item.username }}/vnc/config"
      register: checkvncconfig
      with_items: "{{ vnc_users }}"
    
    - name: Update per-user .vnc/config
      template:
        src: config.j2
        dest: "/home/{{ item.item.username }}/.vnc/config"
        mode: 0755
        owner: "{{ item.item.username }}"
        group: "{{ item.item.usergroup | default(item.item.username) }}"
      when:
        - vnc_ansible_managed_config or not item.stat.exists
      with_items: "{{ checkvncconfig.results }}"


    - name: Enable vnc systemd service for each user
      ansible.builtin.systemd:
        name: "tigervncserver@:{{ item.vnc_num }}.service"
        enabled: true
      with_items: "{{ vnc_users }}"

    - name: allow users to start their vnc session with sudo
      ansible.builtin.lineinfile:
        path: "/etc/sudoers.d/{{ item.username }}"
        line: "{{ item.username }} ALL = NOPASSWD: /bin/systemctl start tigervncserver@\\:{{ item.vnc_num }}.service, /bin/systemctl stop tigervncserver@\\:{{ item.vnc_num }}.service"
        owner: root
        group: root
        mode: '0440'
        create: true
      with_items: "{{ vnc_users }}"

    - name: Set vncstart template
      set_fact:
        vncstarttemplate: vncstart-v2.sh.j2

    - name: Set vncstop template
      set_fact:
        vncstoptemplate: vncstop-v2.sh.j2

    - name: include v2 auto-start services
      include: autostart-standard.yml

  when: vnc_paradigm == "version2"
