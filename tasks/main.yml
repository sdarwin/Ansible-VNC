---
# Include Variables ##########

- name: Include OS-specific variables.
  ansible.builtin.include_vars: "{{ ansible_os_family }}-family.yml"

- name: Include Distribution version specific variables
  ansible.builtin.include_vars: "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"

- name: Set facts based on defaults  # noqa var-naming
  ansible.builtin.set_fact:
    "{{ item[8:] }}": "{{ lookup('vars', item) }}"
  when:
    - item is match("^default_")
    - vars[item[8:]] is not defined
  with_items:
    "{{ vars | list }}"

##########

- name: Update earlier variable names
  ansible.builtin.import_tasks: legacy-vars.yml

- name: Debug info
  ansible.builtin.debug:
    msg: "desktop is {{ vnc_desktop }} and server is {{ vnc_server }}"

- name: Fix test-kitchen
  ansible.builtin.file:
    path: /tmp/kitchen
    state: directory
    recurse: true
    mode: 0775

- name: Fix Ubuntu 17.10 bug, 1
  ansible.builtin.package:
    name: network-manager
    state: present
    update_cache: true
  when:
    - ansible_distribution_version is version_compare('17.10', '==')

- name: Fix Ubuntu 17.10 bug, 2
  ansible.builtin.service:
    name: NetworkManager
    state: started
  when:
    - ansible_distribution_version is version_compare('17.10', '==')

- name: Add customization for xfce4 RH
  ansible.builtin.import_tasks: xfce-rh.yml
  when:
    - ansible_os_family == "RedHat"
    - ansible_distribution_major_version == "8"
    - vnc_desktop == "xfce4"

- name: Install epel gpg key
  ansible.builtin.rpm_key:
    state: present
    key: http://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-{{ ansible_distribution_major_version }}
  when: (ansible_os_family == "RedHat") and ( ansible_distribution != "Amazon" )

# - name: install epel gpg key
#   command: rpm --import http://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-{{ ansible_distribution_major_version }}
#   when:
#     - ansible_os_family == "RedHat"

- name: Install general packages
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
    update_cache: true
  with_items: "{{ vnc_general_packages }}"

- name: Install amazon-linux-extras packages
  ansible.builtin.command: "amazon-linux-extras install -y {{ item }}"
  with_items: "{{ vnc_amazon_linux_extras[vnc_desktop] }}"
  when:
    - ansible_distribution == "Amazon"
    - vnc_amazon_linux_extras is defined
    - vnc_amazon_linux_extras[vnc_desktop] is defined

- name: Install desktop packages
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
    update_cache: true
  with_items: "{{ vnc_desktop_packages[vnc_desktop] }}"

- name: Install vnc_server packages
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
    update_cache: true
  with_items: "{{ vnc_server_packages[vnc_server] }}"

# Tigervnc must be downloaded for Ubuntu 16
- name: Create downloads dir
  ansible.builtin.file:
    path: "/opt/downloads"
    state: directory
    mode: 0755

- name: Download tigervnc
  ansible.builtin.get_url:
    url: "{{ vnc_tiger_url }}"
    dest: "/opt/downloads/"
    mode: 0755
  when:
    - ansible_distribution == "Ubuntu"
    - vnc_server == "tigervnc"
    - ansible_distribution_major_version == "16"

- name: Install tigervnc
  ansible.builtin.shell: apt install -y "/opt/downloads/{{ vnc_tiger_file }}"  # noqa command-instead-of-shell
  when:
    - ansible_distribution == "Ubuntu"
    - vnc_server == "tigervnc"
    - ansible_distribution_major_version == "16"
  changed_when: false

- name: Create VNC group and user
  when: vnc_create_users
  block:
    - name: Create VNC group
      ansible.builtin.group:
        name: "{{ item.usergroup }}"
        state: present
      loop: "{{ vnc_users }}"

    - name: Create VNC users
      ansible.builtin.user:
        name: "{{ item.username }}"
        group: "{{ item.usergroup }}"
        shell: /bin/bash
        skeleton: /etc/skel
      loop: "{{ vnc_users }}"

- name: Create .vnc dirs
  ansible.builtin.file:
    path: "/home/{{ item.username }}/.vnc"
    state: directory
    mode: 0755
    owner: "{{ item.username }}"
    group: "{{ item.usergroup | default(item.username) }}"
  with_items: "{{ vnc_users }}"

- name: Set vnc passwords tightvnc
  ansible.builtin.shell: |
    set -o pipefail
    echo {{ item.vnc_default_password }} | vncpasswd -f > /home/{{ item.username }}/.vnc/passwd
  args:
    chdir: "/home/{{ item.username }}/.vnc"
    creates: "/home/{{ item.username }}/.vnc/passwd"
    executable: /bin/bash
  with_items: "{{ vnc_users }}"
  when: vnc_server == "tightvnc"

- name: Set vnc passwords vnc4server, tigervnc
  ansible.builtin.shell: |
    set -o pipefail
    printf "{{ item.vnc_default_password }}\n{{ item.vnc_default_password }}\n\n" | vncpasswd /home/{{ item.username }}/.vnc/passwd
  args:
    chdir: "/home/{{ item.username }}/.vnc"
    creates: "/home/{{ item.username }}/.vnc/passwd"
    executable: /bin/bash
  with_items: "{{ vnc_users }}"
  when: vnc_server == "vnc4server" or vnc_server == "tigervnc"

- name: Set perms on vnc passwords
  ansible.builtin.file:
    path: "/home/{{ item.username }}/.vnc/passwd"
    owner: "{{ item.username }}"
    group: "{{ item.usergroup | default(item.username) }}"
    mode: 0700
  with_items: "{{ vnc_users }}"

####################################################################################

- name: Gather the package facts
  ansible.builtin.package_facts:
    manager: auto

- name: Set tiger version redhat
  ansible.builtin.set_fact:
    tiger_ver_installed: "{{ ansible_facts.packages['tigervnc-server'][0].version }}"
  when: "'tigervnc-server' in ansible_facts.packages"

- name: Set tiger version debian
  ansible.builtin.set_fact:
    tiger_ver_installed: "{{ ansible_facts.packages['tigervnc-standalone-server'][0].version }}"
  when: "'tigervnc-standalone-server' in ansible_facts.packages"

- name: Print the tiger version
  ansible.builtin.debug:
    var: tiger_ver_installed

- name: Set fact, type of install 1
  ansible.builtin.set_fact:
    vnc_paradigm: "version1"

- name: Set fact, type of install 2
  ansible.builtin.set_fact:
    vnc_paradigm: "version2"
  when:
    - tiger_ver_installed is defined
    - tiger_ver_installed is version('1.11.0', '>=')

- name: Set fact, type of install 3
  ansible.builtin.set_fact:
    vnc_paradigm: "{{ vnc_paradigm_override }}"
  when: vnc_paradigm_override is defined

- name: Check fact, type of install 4
  ansible.builtin.debug:
    var: vnc_paradigm

####################################################################################
#
- name: The vnc_paradigm version1 section
  when: vnc_paradigm == "version1"
  block:
    - name: Checking existence of xstartup files
      ansible.builtin.stat:
        path: "/home/{{ item.username }}/.vnc/xstartup"
      register: checkxstartup
      with_items: "{{ vnc_users }}"

    - name: Update "xstartup" file
      ansible.builtin.template:
        src: xstartup.j2
        dest: "/home/{{ item.item.username }}/.vnc/xstartup"
        mode: 0755
        owner: "{{ item.item.username }}"
        group: "{{ item.item.usergroup | default(item.item.username) }}"
      when:
        - vnc_ansible_managed_xstartup or not item.stat.exists
      with_items: "{{ checkxstartup.results }}"

    # the file .dmrc is currently for Redhat/Centos
    - name: Checking existence of .dmrc files
      ansible.builtin.stat:
        path: "/home/{{ item.username }}/.dmrc"
      register: checkdmrc
      with_items: "{{ vnc_users }}"

    - name: Update .dmrc file
      ansible.builtin.template:
        src: dmrc.j2
        dest: "/home/{{ item.item.username }}/.dmrc"
        mode: 0755
        owner: "{{ item.item.username }}"
        group: "{{ item.item.usergroup | default(item.item.username) }}"
      when:
        - vnc_ansible_managed_xstartup or not item.stat.exists
      with_items: "{{ checkdmrc.results }}"

    - name: Create /etc/sysconfig dir
      ansible.builtin.file:
        path: /etc/sysconfig
        mode: 0755
        owner: root
        group: root
        state: directory
      when:
        - ansible_os_family == 'RedHat'

    - name: Define mate desktop
      ansible.builtin.template:
        src: matedesktop.j2
        dest: /etc/sysconfig/desktop
        mode: 0644
        owner: root
        group: root
      when:
        - vnc_desktop == "mate"
        - ansible_os_family == 'RedHat'

    - name: Set vncstart template
      ansible.builtin.set_fact:
        vncstarttemplate: vncstart-perusersystemd.sh.j2
      when: vnc_install_systemd_services

    - name: Set vncstop template
      ansible.builtin.set_fact:
        vncstoptemplate: vncstop-perusersystemd.sh.j2
      when: vnc_install_systemd_services

    - name: Include systemd auto-start services
      ansible.builtin.import_tasks: autostart-perusersystemd.yml
      when: vnc_install_systemd_services

    - name: Set vncstart template
      ansible.builtin.set_fact:
        vncstarttemplate: vncstart.sh.j2

    - name: Set vncstop template
      ansible.builtin.set_fact:
        vncstoptemplate: vncstop.sh.j2

    - name: Include basic shell scripts to start services
      ansible.builtin.import_tasks: autostart-standard.yml
      when: not vnc_install_systemd_services

##############################################################################################

- name: The vnc_paradigm version2 section
  when: vnc_paradigm == "version2"
  block:
    ## Consider adding this kind of functionality back later. It's useful. However supposedly xstartup is deprecated.
    # - name: checking existence of xstartup files
    # - name: Update "xstartup" file
    # - name: checking existence of .dmrc files
    # - name: Update .dmrc file

    - name: Create vncserver.users file
      ansible.builtin.template:
        src: vncserver.users.j2
        dest: /etc/tigervnc/vncserver.users
        mode: 0644
        owner: root
        group: root

    - name: Checking existence of per-user .vnc/config
      ansible.builtin.stat:
        path: "/home/{{ item.username }}/vnc/config"
      register: checkvncconfig
      with_items: "{{ vnc_users }}"

    - name: Update per-user .vnc/config
      ansible.builtin.template:
        src: config.j2
        dest: "/home/{{ item.item.username }}/.vnc/config"
        mode: 0755
        owner: "{{ item.item.username }}"
        group: "{{ item.item.usergroup | default(item.item.username) }}"
      when:
        - vnc_ansible_managed_config or not item.stat.exists
      with_items: "{{ checkvncconfig.results }}"


    - name: Enable vnc systemd service for each user
      ansible.builtin.systemd:
        name: "{{ vnc_systemd_service_name }}@:{{ item.vnc_num }}.service"
        enabled: true
      with_items: "{{ vnc_users }}"

    - name: Allow users to start their vnc session with sudo
      ansible.builtin.lineinfile:
        path: "/etc/sudoers.d/{{ item.username }}"
        # yamllint disable-line rule:line-length
        line: "{{ item.username }} ALL = NOPASSWD: /bin/systemctl start tigervncserver@\\:{{ item.vnc_num }}.service, /bin/systemctl stop tigervncserver@\\:{{ item.vnc_num }}.service, /bin/systemctl status tigervncserver@\\:{{ item.vnc_num }}.service"
        owner: root
        group: root
        mode: '0440'
        create: true
      with_items: "{{ vnc_users }}"

    - name: Set vncstart template
      ansible.builtin.set_fact:
        vncstarttemplate: vncstart-v2.sh.j2

    - name: Set vncstop template
      ansible.builtin.set_fact:
        vncstoptemplate: vncstop-v2.sh.j2

    - name: Include v2 auto-start services
      ansible.builtin.import_tasks: autostart-standard.yml
